#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import imaplib
import email
import ssl
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta
from typing import List, Dict
import time

load_dotenv()

class NameExtractorFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –§–ò–û —Å–æ –≤—Å–µ–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
    
    def __init__(self):
        self.imap_server = os.environ.get('IMAP_SERVER')
        self.imap_port = int(os.environ.get('IMAP_PORT', 143))
        self.imap_user = os.environ.get('IMAP_USER')
        self.imap_password = os.environ.get('IMAP_PASSWORD')
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –í–°–ï–• —Ñ–æ—Ä–º–∞—Ç–æ–≤ –§–ò–û
        self.name_patterns = [
            # –ü–æ–ª–Ω–æ–µ –§–ò–û (3 —Å–ª–æ–≤–∞): –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤
            r'\b([–ê-–Ø–Å][–∞-—è—ë—ä—å]+\s[–ê-–Ø–Å][–∞-—è—ë—ä—å]+\s[–ê-–Ø–Å][–∞-—è—ë—ä—å]+)\b',
            
            # –§–∞–º–∏–ª–∏—è + 2 –∏–Ω–∏—Ü–∏–∞–ª–∞: –ò–≤–∞–Ω–æ–≤ –ò.–ò., –ò–≤–∞–Ω–æ–≤ –ò. –ò.
            r'\b([–ê-–Ø–Å][–∞-—è—ë—ä—å]+\s[–ê-–Ø–Å]\.\s*[–ê-–Ø–Å]\.)\b',
            
            # –§–∞–º–∏–ª–∏—è + 1 –∏–Ω–∏—Ü–∏–∞–ª: –ò–≤–∞–Ω–æ–≤ –ò.
            r'\b([–ê-–Ø–Å][–∞-—è—ë—ä—å]+\s[–ê-–Ø–Å]\.)\b',
            
            # 2 –∏–Ω–∏—Ü–∏–∞–ª–∞ + —Ñ–∞–º–∏–ª–∏—è: –ò.–ò. –ò–≤–∞–Ω–æ–≤, –ò. –ò. –ò–≤–∞–Ω–æ–≤
            r'\b([–ê-–Ø–Å]\.\s*[–ê-–Ø–Å]\.\s+[–ê-–Ø–Å][–∞-—è—ë—ä—å]+)\b',
            
            # 1 –∏–Ω–∏—Ü–∏–∞–ª + —Ñ–∞–º–∏–ª–∏—è: –ò. –ò–≤–∞–Ω–æ–≤
            r'\b([–ê-–Ø–Å]\.\s+[–ê-–Ø–Å][–∞-—è—ë—ä—å]+)\b',
            
            # –ò–º—è + –§–∞–º–∏–ª–∏—è: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –ø–æ–ª–Ω–æ–µ –§–ò–û)
            r'\b([–ê-–Ø–Å][–∞-—è—ë—ä—å]+\s[–ê-–Ø–Å][–∞-—è—ë—ä—å]+)\b'
        ]
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞–ª–∏—á–∏—è –§–ò–û
        self.name_indicators = [
            '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
            '–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π',
            '–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ', '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä',
            '–æ—Ç:', '—Å —É–≤–∞–∂–µ–Ω–∏–µ–º', '–ø–æ–¥–ø–∏—Å—å', '–∏—Å–ø.', '—Ç–µ–ª.', '–º–æ–±.',
            '—Ñ–∞–∫—Å', 'email', '–ø–æ—á—Ç–∞', '–≤–µ–¥—É—â–∏–π', '—Å—Ç–∞—Ä—à–∏–π', '–≥–ª–∞–≤–Ω—ã–π'
        ]
        
        # –°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ –§–ò–û)
        self.exclusions = [
            '—Ü–µ–Ω—Ç—Ä', '–æ—Ç–¥–µ–ª', '–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Å–ª—É–∂–±–∞',
            '–∫–æ–º–ø–∞–Ω–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ',
            '—Ñ–∏—Ä–º–∞', '–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è', '–≥—Ä—É–ø–ø–∞', '—Ö–æ–ª–¥–∏–Ω–≥', '—Å–µ—Ç—å',
            '—Ä–æ—Å—Å–∏—è', '–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
            '—Å–∏—Å—Ç–µ–º–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
            '–æ–±—â–µ—Å—Ç–≤–æ', '—Ç–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ', '–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤', '–±–∞–Ω–∫',
            '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∞–∫–∞–¥–µ–º–∏—è', '—à–∫–æ–ª–∞',
            '–±–æ–ª—å–Ω–∏—Ü–∞', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–∫–ª–∏–Ω–∏–∫–∞', '–∞–ø—Ç–µ–∫–∞'
        ]
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –§–ò–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_names_only(self, text: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –§–ò–û –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        
        if not text or not isinstance(text, str):
            return []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        text = text[:15000]
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        processed_text = self._preprocess_text(text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        raw_names = self._extract_by_patterns(processed_text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –∫–∞—á–µ—Å—Ç–≤—É
        filtered_names = self._filter_names(raw_names, processed_text)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        final_names = self._normalize_and_deduplicate(filtered_names)
        
        return final_names
    
    def _preprocess_text(self, text: str) -> str:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –§–ò–û"""
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        text = text.replace('\n', ' ').replace('\r', ' ')
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        text = text.replace('—ë', '–µ').replace('–Å', '–ï')
        
        return text.strip()
    
    def _extract_by_patterns(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –§–ò–û –ø–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        
        found_names = []
        
        for pattern in self.name_patterns:
            matches = re.findall(pattern, text)
            found_names.extend(matches)
        
        return found_names
    
    def _filter_names(self, raw_names: List[str], full_text: str) -> List[str]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –§–ò–û –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º"""
        
        filtered = []
        full_text_lower = full_text.lower()
        
        for name in raw_names:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if self._is_excluded(name):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –§–ò–û)
            if self._has_name_context(name, full_text_lower):
                filtered.append(name)
            # –ò–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –§–ò–û (3 —Å–ª–æ–≤–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã)
            elif self._looks_like_name(name):
                filtered.append(name)
        
        return filtered
    
    def _is_excluded(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ '–∏–º—è' –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞"""
        
        name_lower = name.lower()
        
        for exclusion in self.exclusions:
            if exclusion in name_lower:
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ '–∏–º–µ–Ω–∞' (–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ –§–ò–û)
        if len(name) > 50:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã (–§–ò–û –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã)
        if re.search(r'\d', name):
            return True
        
        return False
    
    def _has_name_context(self, name: str, full_text_lower: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä—è–¥–æ–º —Å –∏–º–µ–Ω–µ–º"""
        
        # –ò—â–µ–º –∏–º—è –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ä–∞–¥–∏—É—Å–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
        name_lower = name.lower()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∏–º–µ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        name_pos = full_text_lower.find(name_lower)
        if name_pos == -1:
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ)
        context_start = max(0, name_pos - 100)
        context_end = min(len(full_text_lower), name_pos + len(name_lower) + 100)
        context = full_text_lower[context_start:context_end]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        for indicator in self.name_indicators:
            if indicator in context:
                return True
        
        return False
    
    def _looks_like_name(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –§–ò–û"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –§–ò–û
        if re.search(r'[–ê-–Ø–Å]\.', name):
            return True
        
        # –ï—Å–ª–∏ 3 —Å–ª–æ–≤–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω–æ–µ –§–ò–û
        if len(name.split()) == 3:
            return True
        
        # –ï—Å–ª–∏ 2 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤–∞ –±–µ–∑ —Ü–∏—Ñ—Ä - –º–æ–∂–µ—Ç –±—ã—Ç—å –ò–º—è –§–∞–º–∏–ª–∏—è
        words = name.split()
        if len(words) == 2 and all(len(word) >= 3 for word in words) and not re.search(r'\d', name):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–∞ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
            if all(word[0].isupper() for word in words):
                return True
        
        return False
    
    def _normalize_and_deduplicate(self, names: List[str]) -> List[Dict[str, str]]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –§–ò–û –∏ —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã"""
        
        normalized = []
        seen = set()
        
        for name in names:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∏–Ω–∏—Ü–∏–∞–ª–∞—Ö
            normalized_name = re.sub(r'([–ê-–Ø–Å])\.\s*([–ê-–Ø–Å])\.', r'\1. \2.', name.strip())
            normalized_name = re.sub(r'\s+', ' ', normalized_name)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if normalized_name not in seen:
                normalized.append({
                    'fullname': normalized_name,
                    'type': self._classify_name_type(normalized_name)
                })
                seen.add(normalized_name)
        
        return normalized
    
    def _classify_name_type(self, name: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –§–ò–û"""
        
        if re.search(r'[–ê-–Ø–Å]\.\s*[–ê-–Ø–Å]\.', name):
            return 'with_two_initials'     # –° –¥–≤—É–º—è –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
        elif re.search(r'[–ê-–Ø–Å]\.', name):
            return 'with_one_initial'      # –° –æ–¥–Ω–∏–º –∏–Ω–∏—Ü–∏–∞–ª–æ–º
        elif len(name.split()) == 3:
            return 'full_name'             # –ü–æ–ª–Ω–æ–µ –§–ò–û
        elif len(name.split()) == 2:
            return 'name_surname'          # –ò–º—è –§–∞–º–∏–ª–∏—è
        else:
            return 'unknown'
    
    def _extract_email_body_fast(self, msg) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
        
        body = ""
        max_size = 15000
        
        try:
            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        charset = part.get_content_charset() or 'utf-8'
                        try:
                            payload = part.get_payload(decode=True)
                            if payload:
                                content = payload.decode(charset, errors="ignore")
                                body = content[:max_size]
                                break
                        except Exception:
                            continue
            else:
                charset = msg.get_content_charset() or 'utf-8'
                try:
                    payload = msg.get_payload(decode=True)
                    if payload:
                        content = payload.decode(charset, errors="ignore")
                        body = content[:max_size]
                except Exception:
                    body = ""
        except Exception:
            body = ""
        
        return body.strip()
    
    def _decode_header_clean(self, header_str: str) -> str:
        """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—á—Ç—ã"""
        
        if not header_str:
            return ""
        
        try:
            from email.header import decode_header, make_header
            decoded = str(make_header(decode_header(header_str)))
            return decoded
        except:
            return header_str
    
    def _parse_email_date(self, date_str: str) -> str:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –ø–∏—Å—å–º–∞ –≤ +4 —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
        
        if not date_str:
            return "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        
        try:
            dt = email.utils.parsedate_to_datetime(date_str)
            dt_adjusted = dt.replace(tzinfo=None) + timedelta(hours=4)
            return dt_adjusted.strftime('%d.%m.%Y %H:%M')
        except Exception:
            return date_str[:16] if len(date_str) > 16 else date_str
    
    def test_single_date_detailed(self, date_str: str = '2025-07-29', show_details: bool = True):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –§–ò–û –∑–∞ –æ–¥–Ω—É –¥–∞—Ç—É"""
        
        if show_details:
            print(f"\n{'='*80}")
            print(f"üìù –¢–ï–°–¢ –§–ò–û –ó–ê {date_str} (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
            print(f"{'='*80}")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if show_details:
                print(f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {self.imap_server}...")
            
            mailbox = imaplib.IMAP4(self.imap_server, self.imap_port)
            mailbox.starttls(ssl.create_default_context())
            mailbox.login(self.imap_user, self.imap_password)
            mailbox.select('INBOX')
            
            # –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º
            dt = datetime.strptime(date_str, '%Y-%m-%d')
            imap_date = dt.strftime('%d-%b-%Y')
            criteria = f'(ON "{imap_date}")'
            
            status, data = mailbox.search(None, criteria)
            mail_ids = data[0].split() if status == 'OK' else []
            
            total_emails = len(mail_ids)
            
            if show_details:
                print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º –∑–∞ {date_str}: {total_emails}")
            
            if total_emails == 0:
                if show_details:
                    print("‚ùå –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                mailbox.logout()
                return {
                    'date': date_str,
                    'total_emails': 0,
                    'emails_with_names': 0,
                    'unique_names': 0,
                    'names_list': [],
                    'detailed_results': []
                }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º
            emails_with_names = []
            all_names = []
            
            start_time = time.time()
            
            for i, mail_id in enumerate(mail_ids, 1):
                try:
                    status, msg_data = mailbox.fetch(mail_id, '(RFC822)')
                    if status != 'OK':
                        continue
                    
                    raw_email = msg_data[0][1]
                    msg = email.message_from_bytes(raw_email)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    subject_raw = msg.get('Subject', '–ë–µ–∑ —Ç–µ–º—ã')
                    from_raw = msg.get('From', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    date_raw = msg.get('Date', '')
                    
                    subject = self._decode_header_clean(subject_raw)
                    from_addr = self._decode_header_clean(from_raw)
                    email_date = self._parse_email_date(date_raw)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                    body = self._extract_email_body_fast(msg)
                    
                    # –ò—â–µ–º –§–ò–û
                    names = self.extract_names_only(body)
                    
                    if names:
                        email_info = {
                            'number': i,
                            'subject': subject,
                            'from': from_addr,
                            'date': email_date,
                            'names': names
                        }
                        emails_with_names.append(email_info)
                        all_names.extend(names)
                        
                        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞
                        if show_details:
                            print(f"\nüìß –ü–∏—Å—å–º–æ {i}/{total_emails}: {email_date}")
                            print(f"   üìù –¢–µ–º–∞: {subject}")
                            print(f"   üë§ –û—Ç: {from_addr}")
                            print(f"   üìù –§–ò–û:")
                            for name_info in names:
                                print(f"      ‚úÖ {name_info['fullname']} ({name_info['type']})")
                    
                except Exception as e:
                    if show_details:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏—Å—å–º–∞ {i}: {e}")
                    continue
            
            mailbox.logout()
            
            # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –§–ò–û
            unique_names = []
            seen_names = set()
            for name_info in all_names:
                if name_info['fullname'] not in seen_names:
                    unique_names.append(name_info)
                    seen_names.add(name_info['fullname'])
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–Ω—é
            total_time = time.time() - start_time
            
            if show_details:
                print(f"\n{'='*80}")
                print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–û –ó–ê {date_str}")
                print(f"{'='*80}")
                print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {total_emails}")
                print(f"üìù –ü–∏—Å–µ–º —Å –§–ò–û: {len(emails_with_names)}")
                print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –§–ò–û: {len(unique_names)}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.1f} —Å–µ–∫")
                
                if unique_names:
                    print(f"\nüìã –í–°–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –§–ò–û –ó–ê {date_str}:")
                    for i, name_info in enumerate(sorted(unique_names, key=lambda x: x['fullname']), 1):
                        print(f"   {i:2d}. {name_info['fullname']} ({name_info['type']})")
                
                print(f"\n{'='*80}")
                print(f"‚úÖ –¢–ï–°–¢ –§–ò–û –ó–ê {date_str} –ó–ê–í–ï–†–®–ï–ù")
                print(f"{'='*80}")
            
            return {
                'date': date_str,
                'total_emails': total_emails,
                'emails_with_names': len(emails_with_names),
                'unique_names': len(unique_names),
                'names_list': unique_names,
                'detailed_results': emails_with_names
            }
            
        except Exception as e:
            if show_details:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {date_str}: {e}")
            return None
    
    def test_date_range_detailed(self, start_date: str, end_date: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏"""
        
        print(f"\n{'='*80}")
        print(f"üìù –¢–ï–°–¢ –§–ò–û –ü–û –î–ò–ê–ü–ê–ó–û–ù–£ –î–ê–¢ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô): {start_date} - {end_date}")
        print(f"{'='*80}")
        
        start_dt = datetime.strptime(start_date, '%Y-%m-%d')
        end_dt = datetime.strptime(end_date, '%Y-%m-%d')
        current_date = start_dt
        
        total_emails_all = 0
        total_names_all = []
        all_daily_results = []
        total_days = (end_dt - start_dt).days + 1
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –¥–∞—Ç—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        day_counter = 1
        while current_date <= end_dt:
            date_str = current_date.strftime('%Y-%m-%d')
            
            print(f"\nüéØ –î–ï–ù–¨ {day_counter}/{total_days}: {date_str}")
            print(f"{'='*50}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
            daily_results = self.test_single_date_detailed(date_str, show_details=True)
            
            if daily_results:
                total_emails_all += daily_results['total_emails']
                total_names_all.extend(daily_results['names_list'])
                all_daily_results.append(daily_results)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã {date_str}")
            
            current_date += timedelta(days=1)
            day_counter += 1
        
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –§–ò–û –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        unique_names_all = []
        seen_names_all = set()
        for name_info in total_names_all:
            if name_info['fullname'] not in seen_names_all:
                unique_names_all.append(name_info)
                seen_names_all.add(name_info['fullname'])
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        print(f"\n{'='*80}")
        print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–û –ü–û –î–ò–ê–ü–ê–ó–û–ù–£ {start_date} - {end_date}")
        print(f"{'='*80}")
        print(f"üìÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {total_days}")
        print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {total_emails_all}")
        print(f"üéØ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –§–ò–û: {len(unique_names_all)}")
        
        if unique_names_all:
            print(f"\nüìã –í–°–ï –§–ò–û –ó–ê –ü–ï–†–ò–û–î {start_date} - {end_date}:")
            for i, name_info in enumerate(sorted(unique_names_all, key=lambda x: x['fullname']), 1):
                print(f"   {i:3d}. {name_info['fullname']} ({name_info['type']})")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ù–Ø–ú:")
            for day_result in all_daily_results:
                if day_result['emails_with_names'] > 0:
                    print(f"   üìÖ {day_result['date']}: {day_result['total_emails']} –ø–∏—Å–µ–º, {day_result['emails_with_names']} —Å –§–ò–û, {day_result['unique_names']} —É–Ω–∏–∫.")
                else:
                    print(f"   üìÖ {day_result['date']}: {day_result['total_emails']} –ø–∏—Å–µ–º, –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print(f"\n{'='*80}")
        print(f"‚úÖ –¢–ï–°–¢ –§–ò–û –ü–û –î–ò–ê–ü–ê–ó–û–ù–£ –ó–ê–í–ï–†–®–ï–ù")
        print(f"{'='*80}")
        
        return {
            'start_date': start_date,
            'end_date': end_date,
            'total_days': total_days,
            'total_emails': total_emails_all,
            'total_unique_names': len(unique_names_all),
            'all_names': unique_names_all,
            'daily_results': all_daily_results
        }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –§–ò–û"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ï–†–ê –§–ò–û")
    
    tester = NameExtractorFixed()
    
    # üéØ –ù–ê–°–¢–†–û–ô–ö–ê –î–ê–¢ - –ò–ó–ú–ï–ù–ò –ó–î–ï–°–¨! (—Å—Ç—Ä–æ–∫–∏ 595-596)
    start_date = '2025-07-29'  # ‚Üê –ù–ê–ß–ê–õ–¨–ù–ê–Ø –î–ê–¢–ê (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    end_date = '2025-08-04'    # ‚Üê –ö–û–ù–ï–ß–ù–ê–Ø –î–ê–¢–ê (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
    results = tester.test_date_range_detailed(start_date, end_date)
    
    if results:
        print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –§–ò–û –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {results['start_date']} - {results['end_date']}")
        print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {results['total_emails']}")
        print(f"üìù –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –§–ò–û: {results['total_unique_names']}")


if __name__ == "__main__":
    main()
