#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import imaplib
import email
import ssl
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta
from typing import List
import phonenumbers
import time

load_dotenv()

class PhoneExtractorPerfect:
    """–ò–¥–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self):
        self.imap_server = os.environ.get('IMAP_SERVER')
        self.imap_port = int(os.environ.get('IMAP_PORT', 143))
        self.imap_user = os.environ.get('IMAP_USER')
        self.imap_password = os.environ.get('IMAP_PASSWORD')
        
        # –ú–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–¥—ã –†–æ—Å—Å–∏–∏
        self.mobile_codes = set([
            '910', '912', '913', '914', '915', '916', '917', '918', '919',
            '920', '921', '922', '923', '924', '925', '926', '927', '928', '929',
            '930', '931', '932', '933', '934', '936', '937', '938', '939',
            '950', '951', '952', '953', '954', '955', '956', '957', '958', '959',
            '960', '961', '962', '963', '964', '965', '966', '967', '968', '969',
            '980', '981', '982', '983', '984', '985', '986', '987', '988', '989', '999'
        ])
        
        print("‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_phones_only(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö 4 –ø—Ä–æ–±–ª–µ–º"""
        
        if not text or not isinstance(text, str):
            return []
        
        phones = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        text = text[:15000]
        text = self._preprocess_text(text)
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            base_phones = []
            for match in phonenumbers.PhoneNumberMatcher(text, "RU"):
                phone_number = match.number
                
                if phonenumbers.is_valid_number(phone_number):
                    start_pos = match.start
                    end_pos = match.end
                    
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                    local_context_start = max(0, start_pos - 30)
                    local_context_end = min(len(text), end_pos + 50)
                    local_context = text[local_context_start:local_context_end]
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    phone_variants = self._process_single_phone(
                        phone_number, local_context, start_pos, end_pos
                    )
                    
                    base_phones.extend(phone_variants)
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            comma_phones = self._extract_comma_separated_phones(text)
            base_phones.extend(comma_phones)
            
            # üîß –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
            phones = self._postprocess_mobile_phones(base_phones)
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {e}")
        
        return phones
    
    def _process_single_phone(self, phone_number, local_context: str, start_pos: int, end_pos: int) -> List[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –Ω–æ–º–µ—Ä —Å –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä
        base_formatted = self._format_phone_russian(phone_number)
        
        phones = []
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
        variant_in_same_number = self._extract_local_variants(local_context, base_formatted)
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1,2: –ò—â–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        extensions = self._extract_extensions_improved(local_context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä
        if extensions and not self._is_mobile_phone(base_formatted):
            ext_str = ", ".join(extensions)
            phones.append(f"{base_formatted} ({ext_str})")
        else:
            phones.append(base_formatted)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
        for variant in variant_in_same_number:
            if extensions and not self._is_mobile_phone(variant):
                ext_str = ", ".join(extensions)
                phones.append(f"{variant} ({ext_str})")
            else:
                phones.append(variant)
        
        return phones
    
    def _extract_local_variants(self, local_context: str, base_number: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–æ–º–µ—Ä–∞"""
        
        variants = []
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ü–∏—Ñ—Ä –¢–û–õ–¨–ö–û –≤ —Ç–æ–º –∂–µ –Ω–æ–º–µ—Ä–µ
        # –ü—Ä–∏–º–µ—Ä: "+7 (495) 933 71 47 (48)" - (48) –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É
        variant_pattern = r'\+7\s*\(\d{3}\)\s*\d{3}[-\s]*\d{2}[-\s]*\d{2}\s*\((\d{1,2})\)'
        variant_match = re.search(variant_pattern, local_context)
        
        if variant_match:
            variant_digits = variant_match.group(1)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä
            if not self._is_mobile_phone(base_number):
                variant_number = self._create_variant_number(base_number, variant_digits)
                variants.append(variant_number)
        
        return variants
    
    def _extract_comma_separated_phones(self, text: str) -> List[str]:
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤–∏–¥–∞ +7(38822)6-43-63, 6-43-65"""
        
        phones = []
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä + –∑–∞–ø—è—Ç–∞—è + –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ñ—Ä—ã
        pattern = r'\+7\s*\((\d{3,5})\)\s*(\d{1,3})[-\s]*(\d{2})[-\s]*(\d{2})\s*,\s*(\d{1,3})[-\s]*(\d{2})[-\s]*(\d{2})'
        
        matches = re.finditer(pattern, text)
        
        for match in matches:
            code_raw = match.group(1)
            first_part = match.group(2)
            first_mid = match.group(3)
            first_end = match.group(4)
            second_part = match.group(5)
            second_mid = match.group(6)
            second_end = match.group(7)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ (–ø–µ—Ä–≤—ã–µ 3 —Ü–∏—Ñ—Ä—ã –∏–∑ 5-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞)
            if len(code_raw) == 5:
                real_code = code_raw[:3]
                first_part = code_raw[3:] + first_part
            else:
                real_code = code_raw
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–∞ –Ω–æ–º–µ—Ä–∞
            first_number = f"+7 ({real_code}) {first_part}-{first_mid}-{first_end}"
            second_number = f"+7 ({real_code}) {second_part}-{second_mid}-{second_end}"
            
            phones.extend([first_number, second_number])
        
        return phones
    
    def _extract_extensions_improved(self, context_text: str) -> List[str]:
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1,2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        
        extensions = []
        
        # üîß –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        extension_patterns = [
            r'–¥–æ–±\.?\s*(\d{1,5})',
            r'–¥–æ–ø\.?\s*(\d{1,5})',           # –î–æ–±–∞–≤–ª–µ–Ω–æ: –¥–æ–ø.
            r'–¥–æ–±–∞–≤–æ—á–Ω—ã–π\s+(\d{1,5})',
            r'ext\.?\s*(\d{1,5})',
            r'–≤–Ω\.?\s*(\d{1,5})',            # –î–æ–±–∞–≤–ª–µ–Ω–æ: –≤–Ω.
            r'–≤\.?\s*–Ω\.?\s*(\d{1,5})'       # –î–æ–±–∞–≤–ª–µ–Ω–æ: –≤.–Ω.
        ]
        
        # –ò—â–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        for pattern in extension_patterns:
            matches = re.finditer(pattern, context_text, re.IGNORECASE)
            for match in matches:
                ext_num = match.group(1)
                ext_formatted = f"–¥–æ–±. {ext_num}"
                if ext_formatted not in extensions:
                    extensions.append(ext_formatted)
        
        return extensions
    
    def _postprocess_mobile_phones(self, phones: List[str]) -> List[str]:
        """–£–±–∏—Ä–∞–µ—Ç –¥–æ–±–∞–≤–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        
        processed = []
        seen = set()
        
        for phone in phones:
            if self._is_mobile_phone(phone):
                # –≠—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–π - —É–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–µ
                phone_clean = re.sub(r'\s*\([^)]*–¥–æ–±\.[^)]*\)', '', phone)
                if phone_clean not in seen:
                    processed.append(phone_clean)
                    seen.add(phone_clean)
            else:
                # –≠—Ç–æ –≥–æ—Ä–æ–¥—Å–∫–æ–π - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if phone not in seen:
                    processed.append(phone)
                    seen.add(phone)
        
        return processed
    
    def _is_mobile_phone(self, phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω—ã–º"""
        
        code_match = re.search(r'\+7\s*\((\d{3})\)', phone)
        code = code_match.group(1) if code_match else None
        return code in self.mobile_codes
    
    def _create_variant_number(self, base_number: str, variant_digits: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –Ω–æ–º–µ—Ä–∞ —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏"""
        
        variant_formatted = variant_digits.zfill(2)
        return re.sub(r'-(\d{2})$', f'-{variant_formatted}', base_number)
    
    def _format_phone_russian(self, phone_number) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤ —Ä—É—Å—Å–∫–∏–π —Å—Ç–∏–ª—å: +7 (XXX) XXX-XX-XX"""
        
        international = phonenumbers.format_number(
            phone_number, 
            phonenumbers.PhoneNumberFormat.INTERNATIONAL
        )
        
        if international.startswith('+7 '):
            digits = re.sub(r'\D', '', international[3:])
            if len(digits) >= 10:
                code = digits[:3]
                num = digits[3:]
                if len(num) >= 7:
                    return f'+7 ({code}) {num[:3]}-{num[3:5]}-{num[5:7]}'
        
        return international
    
    def _preprocess_text(self, text: str) -> str:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        def fix_scientific(match):
            try:
                return str(int(float(match.group(0))))
            except:
                return match.group(0)
        
        text = re.sub(r'\d+\.\d+e[+-]?\d+', fix_scientific, text, flags=re.IGNORECASE)
        return text
    
    def _extract_email_body_fast(self, msg) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
        
        body = ""
        max_size = 15000
        
        try:
            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        charset = part.get_content_charset() or 'utf-8'
                        try:
                            payload = part.get_payload(decode=True)
                            if payload:
                                content = payload.decode(charset, errors="ignore")
                                body = content[:max_size]
                                break
                        except Exception:
                            continue
            else:
                charset = msg.get_content_charset() or 'utf-8'
                try:
                    payload = msg.get_payload(decode=True)
                    if payload:
                        content = payload.decode(charset, errors="ignore")
                        body = content[:max_size]
                except Exception:
                    body = ""
        except Exception:
            body = ""
        
        return body.strip()
    
    def _decode_header_clean(self, header_str: str) -> str:
        """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—á—Ç—ã"""
        
        if not header_str:
            return ""
        
        try:
            from email.header import decode_header, make_header
            decoded = str(make_header(decode_header(header_str)))
            return decoded
        except:
            return header_str
    
    def _parse_email_date(self, date_str: str) -> str:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –ø–∏—Å—å–º–∞ –≤ +4 —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
        
        if not date_str:
            return "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        
        try:
            dt = email.utils.parsedate_to_datetime(date_str)
            dt_adjusted = dt.replace(tzinfo=None) + timedelta(hours=4)
            return dt_adjusted.strftime('%d.%m.%Y %H:%M')
        except Exception:
            return date_str[:16] if len(date_str) > 16 else date_str
    
    def test_real_email_perfect(self, date_str: str = '2025-07-29'):
        """üéØ –ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"""
        
        print(f"\n{'='*80}")
        print(f"üìû –ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ PHONENUMBERS –ó–ê {date_str}")
        print(f"{'='*80}")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print(f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {self.imap_server}...")
            mailbox = imaplib.IMAP4(self.imap_server, self.imap_port)
            mailbox.starttls(ssl.create_default_context())
            mailbox.login(self.imap_user, self.imap_password)
            mailbox.select('INBOX')
            
            # –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º
            dt = datetime.strptime(date_str, '%Y-%m-%d')
            imap_date = dt.strftime('%d-%b-%Y')
            criteria = f'(ON "{imap_date}")'
            
            status, data = mailbox.search(None, criteria)
            mail_ids = data[0].split() if status == 'OK' else []
            
            total_emails = len(mail_ids)
            print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º –∑–∞ {date_str}: {total_emails}")
            
            if total_emails == 0:
                print("‚ùå –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º
            emails_with_phones = []
            all_phones = set()
            
            start_time = time.time()
            
            for i, mail_id in enumerate(mail_ids, 1):
                try:
                    status, msg_data = mailbox.fetch(mail_id, '(RFC822)')
                    if status != 'OK':
                        continue
                    
                    raw_email = msg_data[0][1]
                    msg = email.message_from_bytes(raw_email)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    subject_raw = msg.get('Subject', '–ë–µ–∑ —Ç–µ–º—ã')
                    from_raw = msg.get('From', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    date_raw = msg.get('Date', '')
                    
                    subject = self._decode_header_clean(subject_raw)
                    from_addr = self._decode_header_clean(from_raw)
                    email_date = self._parse_email_date(date_raw)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                    body = self._extract_email_body_fast(msg)
                    
                    # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å –∏–¥–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    phones = self.extract_phones_only(body)
                    
                    if phones:
                        emails_with_phones.append({
                            'number': i,
                            'subject': subject,
                            'from': from_addr,
                            'date': email_date,
                            'phones': phones
                        })
                        
                        all_phones.update(phones)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏—Å—å–º–∞ {i}: {e}")
                    continue
            
            mailbox.logout()
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            total_time = time.time() - start_time
            
            print(f"\n{'='*80}")
            print(f"üìä –ò–î–ï–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
            print(f"{'='*80}")
            print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {total_emails}")
            print(f"üìû –ü–∏—Å–µ–º —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏: {len(emails_with_phones)}")
            print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {len(all_phones)}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.1f} —Å–µ–∫")
            
            if emails_with_phones:
                print(f"\n{'='*80}")
                print(f"üìû –ü–ò–°–¨–ú–ê –° –¢–ï–õ–ï–§–û–ù–ê–ú–ò:")
                print(f"{'='*80}")
                
                for email_info in emails_with_phones:
                    print(f"\nüìß –ü–∏—Å—å–º–æ {email_info['number']}/{total_emails}: {email_info['date']}")
                    print(f"   üìù –¢–µ–º–∞: {email_info['subject']}")
                    print(f"   üë§ –û—Ç: {email_info['from']}")
                    print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã:")
                    for phone in email_info['phones']:
                        print(f"      ‚úÖ {phone}")
                
                print(f"\n{'='*80}")
                print(f"üìã –í–°–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –¢–ï–õ–ï–§–û–ù–´:")
                print(f"{'='*80}")
                for i, phone in enumerate(sorted(all_phones), 1):
                    print(f"   {i:2d}. {phone}")
            
            else:
                print(f"\n‚ùå –¢–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            
            print(f"\n{'='*80}")
            print(f"‚úÖ –ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
            print(f"{'='*80}")
            
            return {
                'total_emails': total_emails,
                'emails_with_phones': len(emails_with_phones),
                'unique_phones': len(all_phones),
                'phones_list': list(all_phones)
            }
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ò–î–ï–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê")
    
    tester = PhoneExtractorPerfect()
    
    # üéØ –ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –∑–∞ 29.07.2025 - 04.08.2025
    results = tester.test_date_range('2025-07-29', '2025-08-04')
    
    if results:
        print(f"\nüéâ –ò–î–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìû –ù–∞–π–¥–µ–Ω–æ {results['emails_with_phones']} –ø–∏—Å–µ–º —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏")
        print(f"üéØ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {results['unique_phones']}")


if __name__ == "__main__":
    main()
