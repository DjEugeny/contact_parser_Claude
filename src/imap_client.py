import os
import ssl
import imaplib
import email
from email.header import decode_header, make_header
from email.utils import parsedate_to_datetime, getaddresses
from dotenv import load_dotenv
import socket
from bs4 import BeautifulSoup
import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Optional, Tuple
import sys
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from contact_processor import ContactProcessor, FullContactInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class IMAPClient:
    """IMAP-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã"""
    
    def __init__(self, debug: bool = False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IMAP-–∫–ª–∏–µ–Ω—Ç–∞"""
        
        self.debug = debug
        self.contact_processor = ContactProcessor(debug=debug)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env
        self.imap_server = os.environ.get("IMAP_SERVER")
        self.imap_port = int(os.environ.get("IMAP_PORT", 143))
        self.imap_user = os.environ.get("IMAP_USER")
        self.imap_password = os.environ.get("IMAP_PASSWORD")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤
        self.internal_domains = self._load_list_from_file('data/internal_domains.txt')
        self.blacklist_emails = self._load_list_from_file('data/blacklist.txt')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        socket.setdefaulttimeout(180)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.stats = {
            'total_emails': 0,
            'external_emails': 0,
            'internal_emails': 0,
            'processed_contacts': 0,
            'valid_contacts': 0,
            'high_quality_contacts': 0,  # –ù–û–í–û–ï: —Å—á–µ—Ç—á–∏–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            'low_quality_rejected': 0,   # –ù–û–í–û–ï: –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
            'duplicates_removed': 0,     # –ù–û–í–û–ï: —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π
            'successful_extractions': 0,
            'failed_extractions': 0,
            'chain_emails': 0,
            'original_emails': 0,
            'forwarded_emails': 0
        }
        
        logger.info("‚úÖ IMAP-–∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        if self.debug:
            logger.debug(f"üîå –°–µ—Ä–≤–µ—Ä: {self.imap_server}:{self.imap_port}")
            logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.imap_user}")

    def _load_list_from_file(self, filename: str) -> set:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with open(filename, encoding='utf-8') as f:
                items = set()
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        items.add(line.lower())
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {filename}: {len(items)} –∑–∞–ø–∏—Å–µ–π")
                return items
        except FileNotFoundError:
            logger.warning(f'‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.')
            return set()

    def _is_internal_email(self, email_addr: str) -> bool:
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö email"""
        if not email_addr:
            return True
            
        email_lower = email_addr.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if email_lower in self.blacklist_emails:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–æ–º–µ–Ω—ã
        if '@' in email_lower:
            domain = email_lower.rsplit('@', 1)[-1]
            if domain in self.internal_domains:
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è DNA-Technology
        if 'dna-technology.ru' in email_lower:
            return True
        
        return False

    def _smart_decode(self, value: str) -> str:
        """–£–º–Ω–∞—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–∏—Å–µ–º"""
        if not value:
            return ""
        try:
            return str(make_header(decode_header(value)))
        except Exception:
            return value

    def _extract_email_body(self, msg) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º text/plain"""
        email_body = ""
        
        if msg.is_multipart():
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º text/plain
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition", ""))
                
                if "attachment" not in content_disposition:
                    if content_type == "text/plain":
                        charset = part.get_content_charset() or 'utf-8'
                        try:
                            email_body = part.get_payload(decode=True).decode(charset, errors="ignore")
                            break
                        except Exception:
                            continue
            
            # –ï—Å–ª–∏ text/plain –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º text/html
            if not email_body:
                for part in msg.walk():
                    content_type = part.get_content_type()
                    content_disposition = str(part.get("Content-Disposition", ""))
                    
                    if "attachment" not in content_disposition and content_type == "text/html":
                        charset = part.get_content_charset() or 'utf-8'
                        try:
                            html_body = part.get_payload(decode=True).decode(charset, errors="ignore")
                            email_body = BeautifulSoup(html_body, "html.parser").get_text(separator='\n', strip=True)
                            break
                        except Exception:
                            continue
        else:
            charset = msg.get_content_charset() or 'utf-8'
            try:
                email_body = msg.get_payload(decode=True).decode(charset, errors="ignore")
            except Exception:
                email_body = ""
        
        return email_body.strip()

    def _analyze_email_type(self, subject: str, email_body: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –ø–∏—Å—å–º–∞"""
        
        subject_lower = subject.lower()
        body_lower = email_body.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        if any(marker in subject_lower for marker in ['fwd:', 'fw:', '–ø–µ—Ä–µ—Å–ª:', '–ø–µ—Ä–µ—Å–ª–∞–Ω–æ:']):
            return 'forwarded'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
        if any(marker in subject_lower for marker in ['re:', '–æ—Ç–≤–µ—Ç:', '–æ—Ç–≤:']):
            return 'reply'
        
        # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ü–µ–ø–æ—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
        chain_markers = [
            '–Ω–∞–ø–∏—Å–∞–ª(–∞):',
            'wrote:',
            '–æ—Ç –∫–æ–≥–æ:',
            'from:',
            '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:',
            'sent:',
            '-----original message-----',
            '-----–∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-----'
        ]
        
        if any(marker in body_lower for marker in chain_markers):
            return 'chain'
        
        return 'original'

    def _has_external_participants(self, msg, email_body: str) -> Tuple[bool, List[str]]:
        """–°–¢–†–û–ì–û —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –ø–∏—Å—å–º–∞
        subject = self._smart_decode(msg.get("Subject", ""))
        email_type = self._analyze_email_type(subject, email_body)
        
        if self.debug:
            logger.debug(f"üìß –¢–∏–ø –ø–∏—Å—å–º–∞: {email_type}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if email_type == 'chain':
            self.stats['chain_emails'] += 1
        elif email_type == 'forwarded':
            self.stats['forwarded_emails'] += 1
        else:
            self.stats['original_emails'] += 1
        
        # –°–æ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        external_emails = set()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–∏—Å—å–º–∞
        header_participants = []
        for header_name in ['From', 'To', 'Cc', 'Bcc']:
            header_value = msg.get(header_name, '')
            if header_value:
                participants = getaddresses([header_value])
                for name, email_addr in participants:
                    if email_addr:
                        header_participants.append(email_addr.lower())
        
        # –°–¢–†–û–ì–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for email_addr in header_participants:
            if not self._is_internal_email(email_addr):
                external_emails.add(email_addr)
        
        # –ò—â–µ–º email-–∞–¥—Ä–µ—Å–∞ –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞ (—Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥–ø–∏—Å—è—Ö, –Ω–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö)
        signature_emails = self._extract_signature_emails(email_body)
        for email_addr in signature_emails:
            if not self._is_internal_email(email_addr):
                external_emails.add(email_addr)
        
        result_emails = list(external_emails)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if self.debug and result_emails:
            logger.debug(f"üåê –ù–∞–π–¥–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {result_emails[:3]}{'...' if len(result_emails) > 3 else ''}")
        
        return len(result_emails) > 0, result_emails

    def _extract_signature_emails(self, email_body: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç email —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ–¥–ø–∏—Å–µ–π, –∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ü–µ–ø–æ—á–µ–∫"""
        
        lines = email_body.split('\n')
        signature_emails = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–µ–π
        signature_markers = [
            '—Å —É–≤–∞–∂–µ–Ω–∏–µ–º',
            'best regards',
            '–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ',
            '—Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏',
            '---',
            '___',
            '====',
            '--'
        ]
        
        in_signature = False
        for line in lines:
            line_lower = line.lower().strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ü–µ–ø–æ—á–µ–∫
            if any(marker in line_lower for marker in ['–æ—Ç –∫–æ–≥–æ:', 'from:', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', 'sent:', 'wrote:', 'subject:']):
                in_signature = False
                continue
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∏
            if any(marker in line_lower for marker in signature_markers):
                in_signature = True
                continue
            
            # –ï—Å–ª–∏ –≤ –ø–æ–¥–ø–∏—Å–∏, –∏—â–µ–º email
            if in_signature:
                email_matches = re.findall(r'[\w\.\-]+@[\w\.\-]+', line)
                signature_emails.extend(email_matches)
        
        # –ï—Å–ª–∏ —è–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º email –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–Ω–æ –Ω–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö)
        if not signature_emails and len(lines) > 5:
            last_lines = lines[-8:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å—Ç—Ä–æ–∫
            for line in last_lines:
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ü–µ–ø–æ—á–µ–∫
                if not any(marker in line.lower() for marker in ['–æ—Ç –∫–æ–≥–æ:', 'from:', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', 'sent:', 'subject:']):
                    email_matches = re.findall(r'[\w\.\-]+@[\w\.\-]+', line)
                    signature_emails.extend(email_matches)
        
        return signature_emails

    def process_emails(self, from_date: str, to_date: str) -> List[FullContactInfo]:
        """–û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        processed_contacts = []
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP-—Å–µ—Ä–≤–µ—Ä—É
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {self.imap_server}:{self.imap_port}...")
            
            mailbox = imaplib.IMAP4(self.imap_server, self.imap_port)
            mailbox.starttls(ssl_context=ssl.create_default_context())
            mailbox.login(self.imap_user, self.imap_password)
            mailbox.select("INBOX")
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É!")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –¥–∞—Ç–∞–º
            search_criteria = self._build_search_criteria(from_date, to_date)
            
            # –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º
            status, messages_ids = mailbox.search(None, search_criteria)
            message_id_list = messages_ids[0].split()
            
            total_emails = len(message_id_list)
            self.stats['total_emails'] = total_emails
            
            logger.info(f"üì¨ –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date}: {total_emails}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞
            for i, msg_id in enumerate(message_id_list, 1):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                    status, msg_data = mailbox.fetch(msg_id, "(RFC822)")
                    if status != "OK":
                        continue
                    
                    raw_email = msg_data[0][1]
                    msg = email.message_from_bytes(raw_email)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
                    subject = self._smart_decode(msg.get("Subject", "")).strip()
                    email_body = self._extract_email_body(msg)
                    
                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–∏—Å—å–º–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π (+4 —á–∞—Å–∞)
                    mail_date_raw = msg.get("Date", "")
                    try:
                        mail_date = parsedate_to_datetime(mail_date_raw)
                        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –ö–û–†–†–ï–ö–¶–ò–Ø –í–†–ï–ú–ï–ù–ò (+4 —á–∞—Å–∞)
                        corrected_date = mail_date + timedelta(hours=4)
                        date_str = corrected_date.strftime("%d.%m.%Y %H:%M")
                    except Exception:
                        date_str = mail_date_raw or "-"
                    
                    # –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–Ω–µ—à–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    has_external, external_emails = self._has_external_participants(msg, email_body)
                    
                    if self.debug:
                        logger.debug(f"üìß –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{total_emails}: {subject[:50]}...")
                    
                    if not has_external:
                        self.stats['internal_emails'] += 1
                        if self.debug:
                            logger.debug("‚ö™ –ü–∏—Å—å–º–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                        continue
                    
                    self.stats['external_emails'] += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Å—å–º–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                    logger.info("=" * 60)
                    logger.info(f"üìß –ü–∏—Å—å–º–æ {i}/{total_emails}: {date_str}")
                    logger.info(f"üìù –¢–µ–º–∞: {subject}")
                    logger.info(f"üåê –í–Ω–µ—à–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(external_emails[:3])}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    try:
                        contacts = self.contact_processor.process_email_signature(
                            email_body, subject, date_str, external_emails
                        )
                        
                        if contacts:
                            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É + –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
                            high_quality_contacts = self._filter_and_dedupe_contacts(contacts)
                            
                            if high_quality_contacts:
                                processed_contacts.extend(high_quality_contacts)
                                self.stats['successful_extractions'] += 1
                                self.stats['high_quality_contacts'] += len(high_quality_contacts)
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                                for contact in high_quality_contacts:
                                    logger.info(f"‚úÖ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:")
                                    logger.info(f"   üë§ –§–ò–û: {contact.fio if contact.fio else '[]'}")
                                    logger.info(f"   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {contact.position if contact.position else '[]'}")
                                    logger.info(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {contact.company if contact.company else '[]'}")
                                    logger.info(f"   üìß Email: {contact.email if contact.email else '[]'}")
                                    logger.info(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: {contact.phones if contact.phones else '[]'}")
                                    logger.info(f"   üìç –ê–¥—Ä–µ—Å: {contact.address if contact.address else '[]'}")
                                    logger.info(f"   üèôÔ∏è –ì–æ—Ä–æ–¥: {contact.city if contact.city else '[]'}")
                                    logger.info(f"   üè¶ –ò–ù–ù: {contact.inn if contact.inn else '[]'}")
                                    logger.info(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ: {contact.confidence_score}")
                            else:
                                logger.warning("‚ùå –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (< 0.5), –æ—Ç–±—Ä–æ—à–µ–Ω—ã")
                                self.stats['low_quality_rejected'] += len(contacts)
                                self.stats['failed_extractions'] += 1
                        else:
                            logger.warning("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                            self.stats['failed_extractions'] += 1
                        
                        self.stats['processed_contacts'] += len(contacts) if contacts else 0
                        
                    except Exception as e:
                        self.stats['failed_extractions'] += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞ {msg_id}: {e}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            if processed_contacts:
                logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è {len(processed_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
                unique_contacts = self.contact_processor.deduplicate_contacts(processed_contacts)
                duplicates_removed = len(processed_contacts) - len(unique_contacts)
                self.stats['duplicates_removed'] += duplicates_removed
                self.stats['valid_contacts'] = len(unique_contacts)
                
                if duplicates_removed > 0:
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: {duplicates_removed}")
                
                processed_contacts = unique_contacts
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            mailbox.logout()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ IMAP-–∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
        
        return processed_contacts

    def _filter_and_dedupe_contacts(self, contacts: List[FullContactInfo]) -> List[FullContactInfo]:
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É + –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è"""
        
        if not contacts:
            return []
        
        # –≠—Ç–∞–ø 1: –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∫–∞—á–µ—Å—Ç–≤–æ >= 0.5)
        high_quality = []
        for contact in contacts:
            if contact.confidence_score >= 0.5:
                high_quality.append(contact)
            else:
                self.stats['low_quality_rejected'] += 1
        
        # –≠—Ç–∞–ø 2: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if high_quality:
            unique_contacts = self.contact_processor.deduplicate_contacts(high_quality)
            duplicates_removed = len(high_quality) - len(unique_contacts)
            if duplicates_removed > 0:
                self.stats['duplicates_removed'] += duplicates_removed
                if self.debug:
                    logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π –≤ –ø–∏—Å—å–º–µ: {duplicates_removed}")
            return unique_contacts
        
        return []

    def _build_search_criteria(self, from_date: str, to_date: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º –ø–æ –¥–∞—Ç–∞–º"""
        
        try:
            start_date = datetime.strptime(from_date, "%Y-%m-%d")
            end_date = datetime.strptime(to_date, "%Y-%m-%d")
            
            # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è IMAP: DD-Mon-YYYY
            start_date_imap = start_date.strftime("%d-%b-%Y")
            end_date_imap = end_date.strftime("%d-%b-%Y")
            
            if from_date == to_date:
                return f'(ON "{start_date_imap}")'
            else:
                return f'(SINCE "{start_date_imap}" BEFORE "{end_date_imap}")'
                
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
            # Fallback –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            yesterday = (date.today() - timedelta(days=1)).strftime("%d-%b-%Y")
            return f'(ON "{yesterday}")'

    def get_processing_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        stats = self.stats.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if stats['total_emails'] > 0:
            stats['external_percent'] = round(stats['external_emails'] / stats['total_emails'] * 100, 1)
            stats['internal_percent'] = round(stats['internal_emails'] / stats['total_emails'] * 100, 1)
        
        if stats['processed_contacts'] > 0:
            stats['high_quality_percent'] = round(stats['high_quality_contacts'] / stats['processed_contacts'] * 100, 1)
            stats['rejected_percent'] = round(stats['low_quality_rejected'] / stats['processed_contacts'] * 100, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        try:
            processor_stats = self.contact_processor.get_processing_stats()
            stats.update(processor_stats)
        except Exception:
            pass
        
        return stats

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def test_imap_client():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IMAP-–∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    
    print("=== üìß –¢–ï–°–¢ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û IMAP-–ö–õ–ò–ï–ù–¢–ê ===")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ—á—Ç–µ!")
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (–Ω–µ debug –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –ª–æ–≥–∞)
    client = IMAPClient(debug=False)
    
    # –ó–∞–¥–∞—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from_date = "2025-07-29"
    to_date = "2025-07-29"
    
    try:
        print(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥ {from_date} - {to_date}...")
        
        contacts = client.process_emails(from_date, to_date)
        
        print(f"\n{'='*60}")
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò")
        print(f"{'='*60}")
        
        stats = client.get_processing_stats()
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"üì¨ –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {stats.get('total_emails', 0)}")
        print(f"üåê –° –≤–Ω–µ—à–Ω–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {stats.get('external_emails', 0)} ({stats.get('external_percent', 0)}%)")
        print(f"üè† –¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ: {stats.get('internal_emails', 0)} ({stats.get('internal_percent', 0)}%)")
        print(f"")
        print(f"üìß –¢–∏–ø—ã –ø–∏—Å–µ–º:")
        print(f"   üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ: {stats.get('original_emails', 0)}")
        print(f"   üîó –¶–µ–ø–æ—á–∫–∏: {stats.get('chain_emails', 0)}")
        print(f"   üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ: {stats.get('forwarded_emails', 0)}")
        print(f"")
        print(f"üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
        print(f"   üìù –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {stats.get('processed_contacts', 0)}")
        print(f"   ‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats.get('high_quality_contacts', 0)} ({stats.get('high_quality_percent', 0)}%)")
        print(f"   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ): {stats.get('low_quality_rejected', 0)} ({stats.get('rejected_percent', 0)}%)")
        print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: {stats.get('duplicates_removed', 0)}")
        print(f"   üéØ –ò–¢–û–ì–û–í–´–• –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
        
        print(f"\nüìã –ù–ê–ô–î–ï–ù–û –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ö–û–ù–¢–ê–ö–¢–û–í: {len(contacts)}")
        
        if contacts:
            print(f"\nüîç –ü–†–ò–ú–ï–†–´ –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–• –ö–û–ù–¢–ê–ö–¢–û–í:")
            for i, contact in enumerate(contacts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"\n{'='*40}")
                print(f"üìá –ö–û–ù–¢–ê–ö–¢ {i}")
                print(f"{'='*40}")
                print(f"üë§ –§–ò–û: {contact.fio if contact.fio else '–ù–ï –ù–ê–ô–î–ï–ù–û'}")
                print(f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {contact.position if contact.position else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")
                print(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {contact.company if contact.company else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")
                print(f"üìß Email: {contact.email if contact.email else '–ù–ï –ù–ê–ô–î–ï–ù'}")
                print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã: {contact.phones if contact.phones else '–ù–ï –ù–ê–ô–î–ï–ù–´'}")
                print(f"üìç –ê–¥—Ä–µ—Å: {contact.address if contact.address else '–ù–ï –ù–ê–ô–î–ï–ù'}")
                print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {contact.city if contact.city else '–ù–ï –ù–ê–ô–î–ï–ù'}")
                print(f"üè¶ –ò–ù–ù: {contact.inn if contact.inn else '–ù–ï –ù–ê–ô–î–ï–ù'}")
                print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {contact.confidence_score}")
                print(f"üìÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {contact.email_date}")
        
        print(f"\nüéØ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –í–´–°–û–ö–ò–ú –ö–ê–ß–ï–°–¢–í–û–ú!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_imap_client()
