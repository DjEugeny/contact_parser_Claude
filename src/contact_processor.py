import re
import logging
from typing import List, Dict, Optional
from dataclasses import dataclass, field
from datetime import datetime, timedelta

from ner_extractor import RussianNERExtractor, NERResult
from signature_parser import SignatureParser, ContactInfo

logger = logging.getLogger(__name__)


@dataclass
class FullContactInfo:
    """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
    fio: str = ""
    position: str = ""
    company: str = ""
    email: str = ""
    phones: List[str] = field(default_factory=list)
    address: str = ""
    city: str = ""
    inn: str = ""
    confidence_score: float = 0.0
    issues: List[str] = field(default_factory=list)
    source: str = ""
    email_date: str = ""
    email_subject: str = ""


class ContactProcessor:
    """–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    def __init__(self, debug: bool = False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        
        self.debug = debug
        self.ner_extractor = RussianNERExtractor()
        self.signature_parser = SignatureParser()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.internal_domains = self._load_list_from_file('data/internal_domains.txt')
        self.blacklist_emails = self._load_list_from_file('data/blacklist.txt')
        self.stop_words_person = self._load_list_from_file('data/stop_words_person.txt')
        self.stop_words_org = self._load_list_from_file('data/stop_words_org.txt')
        self.phone_patterns = self._load_list_from_file('data/phone_patterns.txt')
        self.position_patterns = self._load_list_from_file('data/position_patterns.txt')
        self.company_blacklist = self._load_list_from_file('data/company_blacklist.txt')
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥–µ–∫—Å—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        self.phone_regexes = []
        for pattern in self.phone_patterns:
            if pattern and not pattern.startswith('#'):
                try:
                    self.phone_regexes.append(re.compile(pattern))
                except:
                    if self.debug:
                        logger.debug(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π regex –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã DNA-Technology
        self.critical_internal_markers = [
            'telegram: @dna_tech_rus',
            '@dna_tech_rus',  
            'dna-technology.ru',
            '–≤–∞—Ä—à–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, –¥–æ–º 125–∂',
            '–∫–æ—Ä–ø—É—Å 5',
            '+7 (495) 640-17-71',
            '–¥–æ–±. 2030',
            '–æ—Ç –≥–æ–≥–æ–ª–µ–≤–∞',
            '–æ—Ç —Ñ—Ä–æ–ª–æ–≤–∞', 
            '—Å–≤–µ—Ç–ª–∞–Ω–∞ –≤–æ—Ä–æ–Ω–æ–≤–∞',
            '–º–∞—Ä–∏—è –≥–æ–≥–æ–ª–µ–≤–∞',
            '–º–∞—Ä–∏—è —Ñ—Ä–æ–ª–æ–≤–∞',
            '—Å—É—á–∫–æ–≤–∞ –Ω–∞—Ç–∞–ª—å—è',
            'youtube | rutube',
            '>youtube'
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'processed': 0,
            'with_issues': 0,
            'high_confidence': 0,
            'low_confidence': 0,
            'successful_extractions': 0,
            'failed_extractions': 0
        }
        
        logger.info("‚úÖ ContactProcessor —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


    def _load_list_from_file(self, filename: str) -> set:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, encoding='utf-8') as f:
                items = set()
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        items.add(line.lower())
                if self.debug:
                    logger.debug(f"üìÅ {filename}: {len(items)} –∑–∞–ø–∏—Å–µ–π")
                return items
        except FileNotFoundError:
            logger.warning(f'‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return set()


    def process_email_signature(self, email_body: str, email_subject: str, 
                               email_date: str, external_emails: List[str]) -> List[FullContactInfo]:
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        
        contacts = []
        
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(email_body, str):
                logger.error(f"‚ùå email_body –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(email_body)}")
                return []
            
            if not isinstance(external_emails, list):
                logger.error(f"‚ùå external_emails –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(external_emails)}")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –≤–Ω–µ—à–Ω–∏–µ email
            truly_external_emails = []
            for email in external_emails:
                if isinstance(email, str) and not self._is_internal_email(email):
                    truly_external_emails.append(email)
            
            if not truly_external_emails:
                if self.debug:
                    logger.debug("üìß –ù–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö email")
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
            signature_blocks = self._extract_clean_signatures(email_body)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∏
            for signature_block in signature_blocks:
                if isinstance(signature_block, str) and len(signature_block.strip()) > 15:
                    contact = self._process_signature_block(
                        signature_block, 
                        truly_external_emails[0],  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–≤—ã–π email –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        email_subject, 
                        email_date
                    )
                    if contact:
                        contacts.append(contact)
            
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∏–∑ –≤—Å–µ–≥–æ –ø–∏—Å—å–º–∞
            if not contacts:
                clean_body = self._deep_clean_email_body(email_body)
                if isinstance(clean_body, str) and len(clean_body.strip()) > 30:
                    contact = self._process_signature_block(
                        clean_body, 
                        truly_external_emails[0],  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–≤—ã–π email –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        email_subject, 
                        email_date
                    )
                    if contact:
                        contacts.append(contact)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ
            for contact in contacts:
                contact.confidence_score, contact.issues = self._analyze_contact_quality(contact)
                self.stats['processed'] += 1
                
                if contact.issues:
                    self.stats['with_issues'] += 1
                
                if contact.confidence_score >= 0.5:
                    self.stats['high_confidence'] += 1
                else:
                    self.stats['low_confidence'] += 1
            
            return contacts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
            self.stats['failed_extractions'] += 1
            return []


    def _is_internal_email(self, email: str) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö email"""
        if not email or not isinstance(email, str):
            return True
            
        email_lower = email.lower().strip()
        
        # Blacklist –∏–∑ —Ñ–∞–π–ª–∞
        if email_lower in self.blacklist_emails:
            return True
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
        for domain in self.internal_domains:
            if email_lower.endswith('@' + domain):
                return True
        
        return False


    def _extract_clean_signatures(self, email_body: str) -> List[str]:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π"""
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(email_body, str):
            logger.error(f"‚ùå email_body –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(email_body)}")
            return []
        
        signature_markers = [
            '—Å —É–≤–∞–∂–µ–Ω–∏–µ–º',
            'best regards', 
            '–≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ',
            '—Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏',
            '---',
            '____',
            '====',
            '--'
        ]
        
        lines = email_body.split('\n')
        signature_blocks = []
        
        # –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
        for i, line in enumerate(lines):
            line_lower = line.lower().strip()
            
            for marker in signature_markers:
                if marker in line_lower and len(line_lower) < 80:
                    start_idx = i
                    end_idx = min(len(lines), i + 20)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 20 —Å—Ç—Ä–æ–∫
                    signature_block = '\n'.join(lines[start_idx:end_idx])
                    
                    # –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                    clean_block = self._deep_filter_internal_markers(signature_block)
                    if isinstance(clean_block, str) and len(clean_block.strip()) > 15:
                        signature_blocks.append(clean_block)
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        if not signature_blocks and len(lines) > 8:
            last_block = '\n'.join(lines[-15:])  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 15 —Å—Ç—Ä–æ–∫
            clean_block = self._deep_filter_internal_markers(last_block)
            if isinstance(clean_block, str) and len(clean_block.strip()) > 20:
                signature_blocks.append(clean_block)
        
        return signature_blocks


    def _deep_filter_internal_markers(self, text: str) -> str:
        """–ì–õ–£–ë–û–ö–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤"""
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(text, str):
            logger.error(f"‚ùå text –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(text)}")
            return ""
        
        if not text:
            return ""
        
        lines = text.split('\n')
        filtered_lines = []
        
        for line in lines:
            line_lower = line.lower().strip()
            
            if not line_lower:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            is_internal = False
            for marker in self.critical_internal_markers:
                if marker in line_lower:
                    is_internal = True
                    if self.debug:
                        logger.debug(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –º–∞—Ä–∫–µ—Ä: {marker}")
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist –∫–æ–º–ø–∞–Ω–∏–π
            if not is_internal:
                for blacklist_item in self.company_blacklist:
                    if blacklist_item in line_lower:
                        is_internal = True
                        if self.debug:
                            logger.debug(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω blacklist: {blacklist_item}")
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if not is_internal:
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                if re.match(r'^\d{1,2}:\d{2}, \d{1,2} [–∞-—è]+ \d{4}', line_lower):
                    is_internal = True
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—Å–µ–º
                elif re.match(r'^(–æ—Ç –∫–æ–≥–æ|–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ|subject|from|sent):', line_lower):
                    is_internal = True
                # –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                elif line_lower.startswith('>>>') or line_lower.startswith('>>'):
                    is_internal = True
            
            if not is_internal:
                filtered_lines.append(line)
        
        return '\n'.join(filtered_lines)


    def _deep_clean_email_body(self, email_body: str) -> str:
        """–ì–õ–£–ë–û–ö–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(email_body, str):
            logger.error(f"‚ùå email_body –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(email_body)}")
            return ""
        
        lines = email_body.split('\n')
        clean_lines = []
        
        for line in lines:
            line_lower = line.lower().strip()
            
            if not line_lower:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ü–µ–ø–æ—á–µ–∫
            chain_headers = [
                '–æ—Ç –∫–æ–≥–æ:', '–æ—Ç:', 'from:', 'sent:', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:',
                'subject:', '—Ç–µ–º–∞:', 'cc:', '–∫–æ–ø–∏—è:', 'bcc:'
            ]
            
            is_junk = False
            for header in chain_headers:
                if line_lower.startswith(header):
                    is_junk = True
                    break
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
            if not is_junk:
                tech_patterns = [
                    r'^\d{1,2}:\d{2}, \d{1,2}',  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    r'^\d{4}-\d{2}-\d{2}',       # –î–∞—Ç—ã
                    r'^on \d{1,2}/',             # "On 29/07/2025" 
                    r'^–≤ \d{1,2}:\d{2}',         # "–í 10:15"
                    r'^\d{2}\.\d{2}\.\d{4}.*–ø–∏—à–µ—Ç', # "28.07.2025 –ø–∏—à–µ—Ç"
                ]
                
                for pattern in tech_patterns:
                    if re.match(pattern, line_lower):
                        is_junk = True
                        break
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            if not is_junk:
                for marker in self.critical_internal_markers:
                    if marker in line_lower:
                        is_junk = True
                        break
            
            if not is_junk:
                clean_lines.append(line)
        
        return '\n'.join(clean_lines)


    def _process_signature_block(self, signature_block: str, external_email: str,
                                subject: str, date: str) -> Optional[FullContactInfo]:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∏"""
        
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(signature_block, str):
                logger.error(f"‚ùå signature_block –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(signature_block)}")
                return None
            
            if not isinstance(external_email, str):
                logger.error(f"‚ùå external_email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(external_email)}")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é NER
            ner_result = self.ner_extractor.extract_entities(signature_block)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–µ–π
            signature_data = self.signature_parser.parse_signature(signature_block)
            
            contact = FullContactInfo()
            
            # –§–ò–û —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            if hasattr(ner_result, 'persons') and ner_result.persons:
                persons_str = str(ner_result.persons) if not isinstance(ner_result.persons, str) else ner_result.persons
                if self._is_valid_person_name(persons_str):
                    contact.fio = persons_str
            
            # –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
            if hasattr(ner_result, 'positions') and ner_result.positions:
                positions_str = str(ner_result.positions) if not isinstance(ner_result.positions, str) else ner_result.positions
                position = self._clean_position(positions_str)
                if position and self._is_valid_position(position):
                    contact.position = position
            
            # –ö–æ–º–ø–∞–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –º—É—Å–æ—Ä–∞
            if hasattr(ner_result, 'organizations') and ner_result.organizations:
                organizations_str = str(ner_result.organizations) if not isinstance(ner_result.organizations, str) else ner_result.organizations
                company = self._clean_company(organizations_str)
                if company and self._is_valid_company(company):
                    contact.company = company
            
            # –ê–¥—Ä–µ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if hasattr(ner_result, 'locations') and ner_result.locations:
                locations_str = str(ner_result.locations) if not isinstance(ner_result.locations, str) else ner_result.locations
                if self._is_valid_address(locations_str):
                    contact.address = locations_str
            
            # Email - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –≤–Ω–µ—à–Ω–∏–π
            if hasattr(signature_data, 'email') and signature_data.email and not self._is_internal_email(signature_data.email):
                contact.email = str(signature_data.email)
            else:
                contact.email = external_email  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π email –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            
            # –¢–µ–ª–µ—Ñ–æ–Ω—ã - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            contact.phones = self._extract_phones_improved(signature_block)
            if hasattr(signature_data, 'phones') and signature_data.phones:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–µ–π
                phones_from_parser = signature_data.phones if isinstance(signature_data.phones, list) else [str(signature_data.phones)]
                for phone in phones_from_parser:
                    phone_str = str(phone) if not isinstance(phone, str) else phone
                    if phone_str not in contact.phones:
                        contact.phones.append(phone_str)
            
            # –ò–ù–ù
            if hasattr(signature_data, 'inn') and signature_data.inn:
                contact.inn = str(signature_data.inn)
            
            # –ì–æ—Ä–æ–¥
            if contact.address:
                contact.city = self._extract_city_from_address(contact.address)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (+4 —á–∞—Å–∞ –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            contact.email_date = self._correct_email_time(date)
            contact.email_subject = str(subject) if subject else ""
            contact.source = "email_signature"
            
            # –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if self._is_high_quality_contact(contact):
                return contact
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {e}")
        
        return None


    def _extract_phones_improved(self, text: str) -> List[str]:
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(text, str):
            logger.error(f"‚ùå text –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(text)}")
            return []
        
        phones = []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–µ–∫—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
        for regex in self.phone_regexes:
            try:
                matches = regex.findall(text)
                for match in matches:
                    if isinstance(match, tuple):
                        phone = ''.join(match)
                    else:
                        phone = str(match)
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
                    phone = self._normalize_phone(phone)
                    if phone and phone not in phones:
                        phones.append(phone)
            except Exception as e:
                if self.debug:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ regex —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
        additional_patterns = [
            r'\+7-(\d{3})-(\d{3})-(\d{2})-(\d{2})',  # +7-913-399-32-72
            r'8\s+\((\d{3,4})\)\s+(\d{3})-(\d{3})',  # 8 (3852) 291-295
            r'\+7\s+\((\d{3})\)\s+(\d{3})\s+(\d{2})\s+(\d{2})\s+\((\d{2})\)', # +7 (495) 933 71 47 (48)
            r'8\s+(\d{3})-(\d{3})-(\d{2})-(\d{2}),?\s*–¥–æ–±\.(\d+)', # 8 800-770-71-21, –¥–æ–±.1315
        ]
        
        for pattern in additional_patterns:
            try:
                matches = re.findall(pattern, text)
                for match in matches:
                    if isinstance(match, tuple):
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                        if len(match) == 4:  # +7-XXX-XXX-XX-XX
                            phone = f"+7-{match[0]}-{match[1]}-{match[2]}-{match[3]}"
                        elif len(match) == 3:  # 8 (XXXX) XXX-XXX
                            phone = f"8 ({match[0]}) {match[1]}-{match[2]}"
                        elif len(match) == 5:  # +7 (495) 933 71 47 (48)
                            phone = f"+7 ({match[0]}) {match[1]} {match[2]} {match[3]} ({match[4]})"
                        else:
                            phone = ''.join(match)
                    else:
                        phone = str(match)
                    
                    phone = self._normalize_phone(phone)
                    if phone and phone not in phones:
                        phones.append(phone)
            except Exception as e:
                if self.debug:
                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ regex: {e}")
        
        return phones


    def _normalize_phone(self, phone: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not phone or not isinstance(phone, str):
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        phone = re.sub(r'\s+', ' ', phone.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
        if len(phone) < 7:
            return ""
        
        return phone


    def _clean_position(self, position: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Ç –º—É—Å–æ—Ä–∞"""
        if not position or not isinstance(position, str):
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –∏–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        words = position.split()
        cleaned_words = []
        
        # –ò—â–µ–º –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–º—è
        for i, word in enumerate(words):
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è
            if (re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+$', word) and 
                i > 0 and 
                len(word) > 3 and
                word.lower() not in ['–æ—Ç–¥–µ–ª–∞', '–æ—Ç–¥–µ–ª–æ–º', '–≥—Ä—É–ø–ø—ã', '–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞']):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ - –µ—Å–ª–∏ —Ç–æ–∂–µ –∏–º—è, –∑–Ω–∞—á–∏—Ç –∑–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –§–ò–û
                if i + 1 < len(words) and re.match(r'^[–ê-–Ø–Å][–∞-—è—ë]+$', words[i + 1]):
                    break
            cleaned_words.append(word)
        
        return ' '.join(cleaned_words).strip()


    def _clean_company(self, company: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –º—É—Å–æ—Ä–∞"""
        if not company or not isinstance(company, str):
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –º—É—Å–æ—Ä–∞
        prefixes_to_remove = [
            '–∑–∞–∫–∞–∑—á–∏–∫: ',
            '–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ',
            '–∫–ª–∏–µ–Ω—Ç: '
        ]
        
        company_lower = company.lower()
        for prefix in prefixes_to_remove:
            if company_lower.startswith(prefix):
                company = company[len(prefix):]
                break
        
        # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Å –ò–ù–ù, –ö–ü–ü –∏ –∞–¥—Ä–µ—Å–∞–º–∏
        patterns_to_cut = [
            r',\s*–∏–Ω–Ω\s+\d+.*',
            r',\s*–∫–ø–ø\s+\d+.*', 
            r',\s*\d{6},.*',  # –ü–æ—á—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            r'\s*\d{6},.*'    # –ü–æ—á—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –±–µ–∑ –∑–∞–ø—è—Ç–æ–π
        ]
        
        for pattern in patterns_to_cut:
            company = re.sub(pattern, '', company, flags=re.IGNORECASE)
        
        return company.strip()


    def _is_valid_person_name(self, name: str) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω"""
        if not name or not isinstance(name, str) or len(name.strip()) < 3:
            return False
        
        name_lower = name.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
        if name_lower in self.stop_words_person:
            if self.debug:
                logger.debug(f"üö´ –ò–º—è –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ: {name}")
            return False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        invalid_patterns = [
            '—Ü–µ–Ω—Ç—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π',
            'telegram:',
            'subject:',
            '–æ—Ç –∫–æ–≥–æ',
            '–∫–æ–º–ø–∞–Ω–∏—è',
            'youtube',
            'rutube'
        ]
        
        for invalid in invalid_patterns:
            if invalid in name_lower:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ –§–ò–û
        words = name.split()
        if len(words) < 2 or len(words) > 4:
            return False
        
        # –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        for word in words:
            if not re.match(r'^[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+$', word):
                return False
        
        return True


    def _is_valid_position(self, position: str) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"""
        if not position or not isinstance(position, str) or len(position.strip()) < 3:
            return False
        
        position_lower = position.lower()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        invalid_indicators = [
            'subject:',
            '–æ—Ç –∫–æ–≥–æ',
            'telegram:',
            '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            'youtube',
            'rutube',
            '–ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å—á–µ—Ç'
        ]
        
        for invalid in invalid_indicators:
            if invalid in position_lower:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if re.match(r'^[\d\>\<\@\#\$\%]', position_lower):
            return False
        
        return True


    def _is_valid_company(self, company: str) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–π"""
        if not company or not isinstance(company, str) or len(company.strip()) < 3:
            return False
        
        company_lower = company.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        for blacklist_item in self.company_blacklist:
            if blacklist_item in company_lower:
                if self.debug:
                    logger.debug(f"üö´ –ö–æ–º–ø–∞–Ω–∏—è –≤ blacklist: {blacklist_item}")
                return False
        
        return True


    def _is_valid_address(self, address: str) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
        if not address or not isinstance(address, str) or len(address.strip()) < 5:
            return False
        
        address_lower = address.lower()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞–¥—Ä–µ—Å–∞—Ö
        junk_indicators = [
            '>>>',
            '–æ—Ç –∫–æ–≥–æ:',
            'subject:',
            '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:',
            '–æ–ø–ª–∞—Ç—É ‚Ññ',
            '—Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é',
            '–Ω–∞—Å—Ç–æ—è—â–∏–º —É–≤–µ–¥–æ–º–ª—è–µ–º',
            '–≤ –º–∞—Ä—Ç–µ –≤—ã—Å—Ç–∞–≤–ª—è–ª–∏',
            '–ø—Ä–æ—à—É –≤–∞—Å',
            '–∑–∞–∫—É–ø–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è',
            '–∫–ø —è —Ç–æ–ª—å–∫–æ —á—Ç–æ',
            '19:00, 18 –∏—é–Ω—è 2025'
        ]
        
        for junk in junk_indicators:
            if junk in address_lower:
                return False
        
        return True


    def _extract_city_from_address(self, address: str) -> str:
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"""
        
        if not address or not isinstance(address, str):
            return ""
        
        city_patterns = [
            r'[–≥–ì]\.?\s*([–ê-–Ø–Å][–∞-—è—ë\-]+)',
            r'–≥–æ—Ä–æ–¥\s+([–ê-–Ø–Å][–∞-—è—ë\-]+)',
        ]
        
        for pattern in city_patterns:
            match = re.search(pattern, address)
            if match:
                city = match.group(1)
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                if len(city) > 2 and city.lower() not in ['–Ω–∞—Å—Ç–æ—è—â–∏–º', '–ø—Ä–æ—Å–∏–º', '–∑–∞–∫—É–ø–∫–∞']:
                    return city
        
        # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ
        parts = address.split(',')
        if parts:
            first_part = parts[0].strip()
            words = first_part.split()
            for word in words:
                if (re.match(r'^[–ê-–Ø–Å][–∞-—è—ë\-]+$', word) and 
                    len(word) > 3 and 
                    word.lower() not in ['–ø—Ä–æ—Å–∏–º', '–Ω–∞—Å—Ç–æ—è—â–∏–º', '—Å–æ–¥–µ—Ä–∂–∞—Ç', '–∑–∞–∫–∞–∑—á–∏–∫']):
                    return word
        
        return ""


    def _correct_email_time(self, date_str: str) -> str:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–∏—Å—å–º–∞ (+4 —á–∞—Å–∞)"""
        if not date_str or not isinstance(date_str, str):
            return ""
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "29.07.2025 10:10"
            dt = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
            # –î–æ–±–∞–≤–ª—è–µ–º 4 —á–∞—Å–∞
            corrected_dt = dt + timedelta(hours=4)
            return corrected_dt.strftime("%d.%m.%Y %H:%M")
        except:
            return date_str


    def _is_high_quality_contact(self, contact: FullContactInfo) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
        if contact.email and self._is_internal_email(contact.email):
            return False
        
        # –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–ª—è
        has_name = bool(contact.fio and contact.fio.strip())
        has_company = bool(contact.company and contact.company.strip())
        has_email = bool(contact.email and contact.email.strip() and '@' in contact.email)
        has_phone = bool(contact.phones)
        has_address = bool(contact.address and contact.address.strip())
        
        # –î–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º:
        # (–ò–º—è –ò–õ–ò –ö–æ–º–ø–∞–Ω–∏—è) –ò (Email –ò–õ–ò –¢–µ–ª–µ—Ñ–æ–Ω)
        has_identity = has_name or has_company
        has_contact_method = has_email or has_phone
        
        return has_identity and has_contact_method


    def _analyze_contact_quality(self, contact: FullContactInfo) -> tuple[float, List[str]]:
        """–£–õ–£–ß–®–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        
        issues = []
        score = 0.0
        
        # –§–ò–û (30%)
        if contact.fio and len(contact.fio.split()) >= 2:
            score += 0.3
        else:
            issues.append("–§–ò–û –Ω–µ–ø–æ–ª–Ω–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å (10%)
        if contact.position:
            score += 0.1
        else:
            issues.append("–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        
        # –ö–æ–º–ø–∞–Ω–∏—è (20%)
        if contact.company:
            score += 0.2
        else:
            issues.append("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ–ª–µ—Ñ–æ–Ω—ã (20%)
        if contact.phones:
            score += 0.2
        else:
            issues.append("–¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # Email (10%)
        if contact.email and '@' in contact.email:
            score += 0.1
        
        # –ê–¥—Ä–µ—Å (10%)
        if contact.address:
            score += 0.1
        else:
            issues.append("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return round(score, 2), issues


    def deduplicate_contacts(self, contacts: List[FullContactInfo]) -> List[FullContactInfo]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        
        if not contacts:
            return contacts
        
        unique_contacts = []
        seen_keys = set()
        
        for contact in contacts:
            # –°–æ–∑–¥–∞—ë–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –∫–ª—é—á –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            key_parts = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á - email (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
            if contact.email:
                email_normalized = contact.email.lower().strip()
                key_parts.append(f"email:{email_normalized}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á - –§–ò–û (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)
            if contact.fio:
                fio_normalized = re.sub(r'\s+', ' ', contact.fio.lower().strip())
                key_parts.append(f"fio:{fio_normalized}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if key_parts:
                key = '|'.join(sorted(key_parts))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                
                if key not in seen_keys:
                    unique_contacts.append(contact)
                    seen_keys.add(key)
                    if self.debug:
                        logger.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact.fio or contact.email}")
                else:
                    # –ï—Å–ª–∏ –¥—É–±–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
                    existing_idx = None
                    for idx, existing in enumerate(unique_contacts):
                        existing_key_parts = []
                        if existing.email:
                            existing_key_parts.append(f"email:{existing.email.lower().strip()}")
                        if existing.fio:
                            existing_key_parts.append(f"fio:{re.sub(r's+', ' ', existing.fio.lower().strip())}")
                        
                        if key_parts and '|'.join(sorted(existing_key_parts)) == key:
                            existing_idx = idx
                            break
                    
                    if existing_idx is not None and contact.confidence_score > unique_contacts[existing_idx].confidence_score:
                        if self.debug:
                            logger.debug(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –ª—É—á—à–∏–π: {contact.fio or contact.email}")
                        unique_contacts[existing_idx] = contact
                    else:
                        if self.debug:
                            logger.debug(f"üóëÔ∏è –û—Ç–±—Ä–æ—à–µ–Ω –¥—É–±–ª—å: {contact.fio or contact.email}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                unique_contacts.append(contact)
        
        if self.debug and len(contacts) != len(unique_contacts):
            logger.debug(f"üóëÔ∏è –ò—Ç–æ–≥–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: {len(contacts)} ‚Üí {len(unique_contacts)}")
        
        return unique_contacts


    def get_processing_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        stats = self.stats.copy()
        
        if stats['processed'] > 0:
            stats['high_confidence_percent'] = round(stats['high_confidence'] / stats['processed'] * 100, 1)
            stats['issues_percent'] = round(stats['with_issues'] / stats['processed'] * 100, 1)
        
        return stats
