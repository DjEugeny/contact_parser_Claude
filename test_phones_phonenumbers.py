#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import imaplib
import email
import ssl
import os
from dotenv import load_dotenv
from datetime import datetime
from typing import List
import phonenumbers
from phonenumbers import NumberParseException

load_dotenv()

class PhoneExtractorPhoneNumbers:
    """–¢–µ—Å—Ç–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ phonenumbers"""
    
    def __init__(self):
        self.imap_server = os.environ.get('IMAP_SERVER')
        self.imap_port = int(os.environ.get('IMAP_PORT', 143))
        self.imap_user = os.environ.get('IMAP_USER')
        self.imap_password = os.environ.get('IMAP_PASSWORD')
        
        print("‚úÖ –¢–µ—Å—Ç–µ—Ä —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π phonenumbers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_phones_only(self, text: str) -> List[str]:
        """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å –ø–æ–º–æ—â—å—é phonenumbers"""
        
        if not text or not isinstance(text, str):
            return []
        
        phones = []
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
        text = self._preprocess_text(text)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PhoneNumberMatcher –¥–ª—è –†–æ—Å—Å–∏–∏
            for match in phonenumbers.PhoneNumberMatcher(text, "RU"):
                phone_number = match.number
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä
                if phonenumbers.is_valid_number(phone_number):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
                    formatted_phone = self._format_phone(phone_number, text)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ò–ù–ù/–ö–ü–ü (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞)
                    if self._is_real_phone(formatted_phone, text) and formatted_phone not in phones:
                        phones.append(formatted_phone)
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {e}")
        
        return phones
    
    def _preprocess_text(self, text: str) -> str:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
        def fix_scientific(match):
            try:
                return str(int(float(match.group(0))))
            except:
                return match.group(0)
        
        text = re.sub(r'\d+\.\d+e[+-]?\d+', fix_scientific, text, flags=re.IGNORECASE)
        return text
    
    def _format_phone(self, phone_number, original_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥: +7 (XXX) XXX-XX-XX"""
        
        # –ë–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted = phonenumbers.format_number(phone_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +7 (XXX) XXX-XX-XX
        if formatted.startswith('+7 '):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ +7
            digits = re.sub(r'\D', '', formatted[3:])
            if len(digits) >= 10:
                code = digits[:3]
                num = digits[3:]
                if len(num) >= 7:
                    base_formatted = f'+7 ({code}) {num[:3]}-{num[3:5]}-{num[5:7]}'
                    
                    # –ò—â–µ–º –¥–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                    extension = self._extract_extension(original_text, formatted)
                    return base_formatted + extension
        
        return formatted
    
    def _extract_extension(self, original_text: str, phone_in_text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ä—è–¥–æ–º —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        extension_patterns = [
            r'–¥–æ–±\.?\s*(\d+)',
            r'ext\.?\s*(\d+)',
            r'–¥–æ–±–∞–≤–æ—á–Ω—ã–π\s+(\d+)'
        ]
        
        for pattern in extension_patterns:
            matches = re.finditer(pattern, original_text, re.IGNORECASE)
            for match in matches:
                return f' (–¥–æ–±. {match.group(1)})'
        
        return ""
    
    def _is_real_phone(self, phone: str, original_text: str) -> bool:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ù–ù/–ö–ü–ü"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã
        digits = re.sub(r'\D', '', phone)
        
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ò–ù–ù/–ö–ü–ü, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if len(digits) in [9, 10, 12]:
            # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
            phone_indicators = ['—Ç–µ–ª', '–º–æ–±', '—Ñ–∞–∫—Å', '+7', '8 (', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Ç.']
            text_lower = original_text.lower()
            has_phone_context = any(indicator in text_lower for indicator in phone_indicators)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ò–ù–ù
            if not has_phone_context:
                return False
        
        return True
    
    def _extract_email_body(self, msg) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞"""
        body = ""
        
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                if content_type == "text/plain":
                    charset = part.get_content_charset() or 'utf-8'
                    try:
                        body = part.get_payload(decode=True).decode(charset, errors="ignore")
                        break
                    except Exception:
                        continue
        else:
            charset = msg.get_content_charset() or 'utf-8'
            try:
                body = msg.get_payload(decode=True).decode(charset, errors="ignore")
            except Exception:
                body = ""
        
        return body.strip()
    
    def test_phones_for_date(self, date_str: str, max_emails: int = 10):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        
        print(f"\n{'='*60}")
        print(f"üìû –¢–ï–°–¢ PHONENUMBERS –ó–ê {date_str}")
        print(f"{'='*60}")
        
        try:
            mailbox = imaplib.IMAP4(self.imap_server, self.imap_port)
            mailbox.starttls(ssl.create_default_context())
            mailbox.login(self.imap_user, self.imap_password)
            mailbox.select('INBOX')
            
            dt = datetime.strptime(date_str, '%Y-%m-%d')
            imap_date = dt.strftime('%d-%b-%Y')
            criteria = f'(ON "{imap_date}")'
            
            status, data = mailbox.search(None, criteria)
            mail_ids = data[0].split() if status == 'OK' else []
            
            print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(mail_ids)}")
            
            all_phones = []
            processed_emails = 0
            
            for i, mail_id in enumerate(mail_ids):
                if processed_emails >= max_emails:
                    break
                
                try:
                    status, msg_data = mailbox.fetch(mail_id, '(RFC822)')
                    if status != 'OK':
                        continue
                    
                    raw_email = msg_data[0][1]
                    msg = email.message_from_bytes(raw_email)
                    
                    subject = msg.get('Subject', '–ë–µ–∑ —Ç–µ–º—ã')
                    from_addr = msg.get('From', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    body = self._extract_email_body(msg)
                    
                    phones = self.extract_phones_only(body)
                    
                    if phones:
                        print(f"\nüìß –ü–∏—Å—å–º–æ {i+1}: {subject[:50]}...")
                        print(f"üë§ –û—Ç: {from_addr}")
                        print(f"üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:")
                        for phone in phones:
                            print(f"   ‚úÖ {phone}")
                            if phone not in all_phones:
                                all_phones.append(phone)
                    else:
                        print(f"\nüìß –ü–∏—Å—å–º–æ {i+1}: {subject[:50]}... (–ë–ï–ó –¢–ï–õ–ï–§–û–ù–û–í)")
                    
                    processed_emails += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {i+1}: {e}")
                    continue
            
            mailbox.logout()
            
            print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê {date_str}:")
            print(f"   üì¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {processed_emails}")
            print(f"   üìû –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {len(all_phones)}")
            
            if all_phones:
                print(f"\nüìã –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –¢–ï–õ–ï–§–û–ù–´:")
                for i, phone in enumerate(all_phones, 1):
                    print(f"   {i:2d}. {phone}")
            else:
                print(f"\n‚ùå –¢–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
            return all_phones
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def test_sample_text(self, text: str, description: str = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ —Ç–µ–∫—Å—Ç–∞"""
        
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢ –ù–ê –û–ë–†–ê–ó–¶–ï: {description}")
        print(f"{'='*60}")
        
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print(f"   {text}")
        
        phones = self.extract_phones_only(text)
        
        print(f"\nüìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã: {len(phones)}")
        for phone in phones:
            print(f"   ‚úÖ {phone}")
        
        return phones


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è phonenumbers"""
    
    print("=== üìû –¢–ï–°–¢–ï–† –° –ë–ò–ë–õ–ò–û–¢–ï–ö–û–ô PHONENUMBERS ===")
    
    tester = PhoneExtractorPhoneNumbers()
    
    # üéØ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—Ü—ã
    test_samples = [
        ("–¢–µ–ª–µ—Ñ–æ–Ω: +7-913-399-32-72", "–î–µ—Ñ–∏—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ª–æ–≥–æ–≤"),
        ("8 800-770-71-21, –¥–æ–±.1315", "8-–∫–∞ —Å –¥–æ–±–∞–≤–æ—á–Ω—ã–º"),
        ("–¢–µ–ª. +7 (495) 933 71 47 (48), –¥–æ–±.171", "–°–ª–æ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–æ–±."),
        ("–ò–ù–ù 5408287373, —Ç–µ–ª: 8 (3852) 291-295", "–° –ò–ù–ù"),
        ("–ö–ü–ü 540801001, –û–ì–†–ù 1115476045871, –º–æ–±. +7 (913) 930-03-26", "–° –ö–ü–ü –∏ –û–ì–†–ù"),
        ("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –û–ú–¢–°: –ë–∞–±–∏—á–µ–Ω–∫–æ –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á\n‚òé –¢–µ–ª–µ—Ñ–æ–Ω: +7-913-399-32-72", "–ò–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏"),
        ("—Ç–µ–ª.: +7 (913) 928-12-94\n–¢–µ–ª–µ—Ñ–æ–Ω.: +7 (905) 952-20-20, +7 (383) 380-21-04", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã"),
        ("—Ç. +7-923-101 7014", "—Ç. —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"),
        ("8 995 101-76-30", "8 —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –±–µ–∑ —Å–∫–æ–±–æ–∫"),
        ("5408287373", "–ß–∏—Å—Ç—ã–π –ò–ù–ù (–¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)"),
        ("540801001", "–ß–∏—Å—Ç—ã–π –ö–ü–ü (–¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)"),
        ("1115476045871", "–ß–∏—Å—Ç—ã–π –û–ì–†–ù (–¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)")
    ]
    
    success_count = 0
    total_count = len(test_samples)
    
    for text, desc in test_samples:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢: {desc}")
        print(f"{'='*60}")
        
        phones = tester.test_sample_text(text, desc)
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: –µ—Å–ª–∏ –Ω–∞—à–µ–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        should_find = not ("–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" in desc)
        found_phones = len(phones) > 0
        
        if should_find and found_phones:
            print(f"   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ù–∞—à–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω—ã")
            success_count += 1
        elif not should_find and not found_phones:
            print(f"   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª")
            success_count += 1
        elif should_find and not found_phones:
            print(f"   ‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ù–µ –Ω–∞—à–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω—ã")
        else:
            print(f"   ‚ö†Ô∏è –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–´–ô: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)")
    
    if success_count >= total_count * 0.9:  # 90% —É—Å–ø–µ—Ö–∞
        print(f"üéâ PHONENUMBERS –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ—á—Ç–µ!")
        return True
    else:
        print(f"‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò.")
        return False


if __name__ == "__main__":
    success = main()
    
    if success:
        print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ—á—Ç–µ")
        print(f"–ó–∞–ø—É—Å–∫: tester.test_phones_for_date('2025-07-29', max_emails=5)")
